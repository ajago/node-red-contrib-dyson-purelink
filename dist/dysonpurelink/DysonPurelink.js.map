{"version":3,"sources":["../src/dysonpurelink/DysonPurelink.ts"],"names":[],"mappings":";;AAAA,IAAM,OAAO,GAAG,OAAO,CAAC,SAAS,CAAC,EAAE,CAAA;AACpC,2CAA0C;AAC1C,mCAAkC;AAElC;IAME,uBAAY,KAAK,EAAE,QAAQ,EAAE,OAAO;QAClC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;QAC1B,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,WAAW,GAAG,IAAI,uBAAU,EAAE,CAAC;IACtC,CAAC;IAED,kCAAU,GAAV;QAAA,iBAYC;QAXC,OAAO,IAAI,CAAC,WAAW,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;YACpF,OAAO,KAAI,CAAC,WAAW,CAAC,eAAe,EAAE,CAAC,IAAI,CAAC,UAAA,YAAY;gBACzD,IAAI,OAAO,GAAG,IAAI,GAAG,EAAE,CAAC;gBACxB,YAAY,CAAC,OAAO,CAAC,UAAA,UAAU;oBAC7B,IAAM,MAAM,GAAG,IAAI,eAAM,CAAC,UAAU,CAAC,CAAC;oBACtC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;gBACrC,CAAC,CAAC,CAAC;gBAEH,OAAO,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;YACtC,CAAC,CAAC,CAAA;QACJ,CAAC,CAAC,CAAA;IACJ,CAAC;IAED,0CAAkB,GAAlB,UAAmB,QAAQ;QACzB,IAAI,cAAc,GAAG,IAAI,GAAG,EAAE,CAAC;QAC/B,OAAO,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,YAAY,EAAE,EAAE,UAAC,OAAO;YAC3C,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC;YAC1B,IAAI,UAAU,GAAG,KAAK,CAAC;YAEvB,IAAI,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE;gBACxB,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAC3B,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;gBACvB,MAAM,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;aACpB;YAED,IAAM,aAAa,GAAG;gBACpB,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,EAAE,EAAE,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC;gBACxB,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,MAAM,QAAA;gBACN,UAAU,YAAA;aACX,CAAA;YAED,OAAO,CAAC,GAAG,CAAC,yBAAuB,aAAa,CAAC,MAAQ,CAAC,CAAC;YAE3D,cAAc,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;YAExD,QAAQ,CAAC,cAAc,CAAC,CAAC;QAC3B,CAAC,CAAC,CAAC;IACL,CAAC;IACH,oBAAC;AAAD,CAtDA,AAsDC,IAAA;AAtDY,sCAAa","file":"DysonPurelink.js","sourcesContent":["const bonjour = require('bonjour')()\r\nimport { DysonCloud } from \"./dysonCloud\";\r\nimport { Device } from \"./device\";\r\n\r\nexport class DysonPurelink {\r\n  _email: string;\r\n  _password: string;\r\n  _country: string;\r\n  _dysonCloud: DysonCloud; \r\n\r\n  constructor(email, password, country) {\r\n    this._email = email;\r\n    this._password = password;\r\n    this._country = country;   \r\n    this._dysonCloud = new DysonCloud();   \r\n  }\r\n\r\n  getDevices() {    \r\n    return this._dysonCloud.authenticate(this._email, this._password, this._country).then(() => {\r\n      return this._dysonCloud.getCloudDevices().then(cloudDevices => {\r\n        let devices = new Map();\r\n        cloudDevices.forEach(deviceInfo => {\r\n          const device = new Device(deviceInfo);\r\n          devices.set(device.serial, device);\r\n        });\r\n\r\n        return Array.from(devices.values());\r\n      })\r\n    })\r\n  }\r\n\r\n  findNetworkDevices(callback) {\r\n    let networkDevices = new Map();\r\n    bonjour.find({ type: 'dyson_mqtt' }, (service) => {\r\n      let serial = service.name;\r\n      let mqttPrefix = '475';\r\n\r\n      if (serial.includes('_')) {\r\n        serial = serial.split('_');\r\n        mqttPrefix = serial[0];\r\n        serial = serial[1];\r\n      }\r\n\r\n      const networkDevice = {\r\n        name: service.name,\r\n        ip: service.addresses[0],\r\n        port: service.port,\r\n        serial,\r\n        mqttPrefix\r\n      }\r\n\r\n      console.log(`Got network device: ${networkDevice.serial}`);\r\n\r\n      networkDevices.set(networkDevice.serial, networkDevice);\r\n\r\n      callback(networkDevices);\r\n    });\r\n  }\r\n}\r\n"]}