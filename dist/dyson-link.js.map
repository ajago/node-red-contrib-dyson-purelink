{"version":3,"sources":["../src/dyson-link.ts"],"names":[],"mappings":"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","file":"dyson-link.js","sourcesContent":["\r\nimport { Red, Node } from 'node-red';\r\nimport { DysonPurelink } from './dysonpurelink/DysonPurelink';\r\n\r\n\r\nexport interface DysonNode extends Node {\r\n    device: any;\r\n    devicelink: any;\r\n    action: any;\r\n    value: any;\r\n}\r\n\r\nmodule.exports = function (RED: Red) {\r\n    function sensorNode(config: any) {\r\n        RED.nodes.createNode(this, config);\r\n        let configNode = RED.nodes.getNode(config.confignode);\r\n        if(!configNode){\r\n            this.error(\"Config is missing!\")\r\n            return;\r\n        }\r\n        let node = this;\r\n        node.config = configNode;\r\n        node.device = config.device;\r\n        node.action = config.action;\r\n        node.value = config.value;\r\n        node.deviceserial = config.deviceserial;\r\n\r\n        let pureLink = new DysonPurelink(node.config.username, node.config.password, 'DE');\r\n        pureLink.getDevices().then(cloud_devices => {\r\n            if (!Array.isArray(cloud_devices) || cloud_devices.length === 0) {\r\n                return\r\n            }\r\n            cloud_devices.forEach((cloud_device) => {\r\n                if (cloud_device.serial === node.deviceserial) {\r\n                    pureLink.findNetworkDevices((network_devices) => {\r\n                        network_devices.forEach(network_device => {\r\n                            if (network_device.serial === node.deviceserial) {\r\n                                cloud_device.updateNetworkInfo(network_device);\r\n                                node.devicelink = cloud_device;\r\n                                node.devicelink.connect('dyson_' + Math.random().toString(16));\r\n                            }\r\n                        });\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        try {\r\n            node.on('input', (msg) => {\r\n                getStatus(msg, node, node.config);\r\n            });\r\n        }\r\n        catch (err) {\r\n            node.error('Error: ' + err.message);\r\n            node.status({ fill: \"red\", shape: \"ring\", text: err.message })\r\n        }\r\n\r\n        node.on('close', () => {\r\n            node.devicelink.disconnect();\r\n        });\r\n    }\r\n\r\n    function getStatus(msg: any, node: DysonNode, config: any) {\r\n        let device = node.devicelink;\r\n        if (device) {\r\n            let action = 'getFanStatus';\r\n            if (msg.payload.action) {\r\n                action = msg.payload.action\r\n            } else if (node.action) {\r\n                action = node.action\r\n            }\r\n\r\n            switch (action) {\r\n                case 'getTemperature':\r\n                    device.getTemperature().then(t => node.send({ payload: { temperature: t } }))\r\n                    break;\r\n                case 'getAirQuality':\r\n                    device.getAirQuality().then(t => node.send({ payload: { air_quality: t } }))\r\n                    break;\r\n                case 'getRelativeHumidity':\r\n                    device.getRelativeHumidity().then(t => node.send({ payload: { relative_humidity: t } }))\r\n                    break;\r\n                case 'getFanStatus':\r\n                    device.getFanStatus().then(t => node.send({ payload: { fan_status: t } }))\r\n                    break;\r\n                case 'getFanSpeed':\r\n                    device.getFanSpeed().then(t => node.send({ payload: { fan_speed: t } }))\r\n                    break;\r\n                case 'getRotationStatus':\r\n                    device.getRotationStatus().then(t => node.send({ payload: { rotation: t } }))\r\n                    break;\r\n                case 'getAutoOnStatus':\r\n                    device.getAutoOnStatus().then(t => node.send({ payload: { auto_on: t } }))\r\n                    break;\r\n                case 'turnOn':\r\n                    device.turnOn();\r\n                    break;\r\n                case 'turnOff':\r\n                    device.turnOff();\r\n                    break;\r\n                case 'setRotation':\r\n                    device.setRotation(node.value || msg.payload.rotation).then(t => node.send({ payload: { rotation: t } }))\r\n                    break;\r\n                case 'setFanSpeed':\r\n                    device.setFanSpeed(node.value || msg.payload.speed).then(t => node.send({ payload: { fan_speed: t } }))\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n\r\n    RED.nodes.registerType(\"dyson-link\", sensorNode);\r\n}"]}