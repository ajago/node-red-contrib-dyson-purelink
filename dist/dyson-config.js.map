{"version":3,"sources":["../src/dyson-config.ts"],"names":[],"mappings":";;AAAA,+DAA8D;AAE9D,MAAM,CAAC,OAAO,GAAG,UAAU,GAAQ;IAC/B,SAAS,MAAM,CAAC,MAAM;QAClB,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAEnC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;QAChC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC,OAAO,CAAC;QAC9B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACvB,CAAC;IAED,GAAG,CAAC,SAAS,CAAC,GAAG,CAAC,mBAAmB,EAAE,UAAU,GAAG,EAAE,GAAG;QACrD,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACnC,IAAM,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;QAC7B,IAAI,MAAM,GAAG,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QAEvC,IAAI,QAAQ,GAAG,IAAI,6BAAa,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;QACzE,QAAQ,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,UAAA,OAAO;YAC9B,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,OAAO,CAAC,MAAM,KAAK,CAAC,EAAE;gBACjD,OAAM;aACT;YACD,IAAI,GAAG,GAAG,EAAE,CAAC;YACb,KAAmB,UAAO,EAAP,mBAAO,EAAP,qBAAO,EAAP,IAAO,EAAE;gBAAvB,IAAI,MAAM,gBAAA;gBACX,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,CAAA;aAC/B;YACD,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAClB,CAAC,CAAC,CAAC,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC;IACxC,CAAC,CAAC,CAAC;IAEH,GAAG,CAAC,KAAK,CAAC,YAAY,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;AACnD,CAAC,CAAA","file":"dyson-config.js","sourcesContent":["import { DysonPurelink } from \"./dysonpurelink/DysonPurelink\";\r\n\r\nmodule.exports = function (RED: any) {\r\n    function config(config) {\r\n        RED.nodes.createNode(this, config);\r\n\r\n        this.username = config.username;\r\n        this.password = config.password;\r\n        this.country = config.country;\r\n        this.config = this;\r\n    }\r\n\r\n    RED.httpAdmin.get(\"/dysonDevices/:id\", function (req, res) {\r\n        RED.log.debug(\"GET /dysonDevices\");\r\n        const nodeId = req.params.id;\r\n        let config = RED.nodes.getNode(nodeId);\r\n\r\n        let pureLink = new DysonPurelink(config.username, config.password, 'DE');\r\n        pureLink.getDevices().then(devices => {\r\n            if (!Array.isArray(devices) || devices.length === 0) {\r\n                return\r\n            }\r\n            let ret = [];\r\n            for (let device of devices) {\r\n                ret.push(device._deviceInfo)\r\n            }\r\n            res.json(ret);\r\n        }).catch(err => console.error(err));\r\n    });\r\n\r\n    RED.nodes.registerType(\"dyson-config\", config);\r\n}"]}